/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the ReceIT application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/receits/{receitId}: Stores ReceIT (task) data, accessible only to the owner.
 *
 * Key Security Decisions:
 * - Users can only access their own user document and their own ReceITs.
 * - Admin users are not granted any special access; they are treated as regular users.
 * - Listing of users is not allowed.
 *
 * Denormalization for Authorization:
 * - Receit documents are required to have a `userId` field that matches the parent user document's ID. This ensures data consistency and allows for efficient ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' reads their profile.
     *   - auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *   - auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes their profile.
     *   - auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get) User with ID 'user123' tries to read profile of 'user456'.
     *   - auth.uid: 'user123'
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
      allow list: if false;
    }

    /**
     * @description Controls access to ReceIT documents within a user's collection.
     * @path /users/{userId}/receits/{receitId}
     * @allow (create) User 'user123' creates a ReceIT in their collection.
     *   - auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) User 'user123' reads a ReceIT in their collection.
     *   - auth.uid: 'user123'
     * @allow (update) User 'user123' updates a ReceIT in their collection.
     *   - auth.uid: 'user123'
     * @allow (delete) User 'user123' deletes a ReceIT in their collection.
     *   - auth.uid: 'user123'
     * @deny (create) User 'user123' tries to create a ReceIT for 'user456'.
     *   - auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (get) User 'user123' tries to read a ReceIT from user 'user456'.
     *   - auth.uid: 'user123'
     * @principle Enforces document ownership for all operations on ReceITs, ensuring users can only manage their own tasks.
     */
    match /users/{userId}/receits/{receitId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource != null && resource.data.userId == userId;
      allow list: if isOwner(userId);
    }
  }
}