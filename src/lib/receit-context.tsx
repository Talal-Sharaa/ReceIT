"use client";

import React, { createContext, useContext, ReactNode, useCallback, useMemo } from 'react';
import { collection, doc, Timestamp } from 'firebase/firestore';
import { useCollection, useFirestore, useUser, useMemoFirebase, addDocumentNonBlocking, updateDocumentNonBlocking, deleteDocumentNonBlocking } from '@/firebase';
import { type Receit, receitSchema } from './types';

interface ReceitContextType {
  receits: Receit[];
  isLoading: boolean;
  addReceit: (receit: Omit<Receit, 'id' | 'status' | 'userId'>) => void;
  updateReceit: (receit: Receit) => void;
  deleteReceit: (id: string, withLinked?: boolean) => void;
  getReceitById: (id: string) => Receit | undefined;
  categories: string[];
}

const ReceitContext = createContext<ReceitContextType | undefined>(undefined);

export const ReceitProvider = ({ children }: { children: ReactNode }) => {
  const { user } = useUser();
  const firestore = useFirestore();

  const receitsCollectionRef = useMemoFirebase(() => {
    if (!user) return null;
    return collection(firestore, 'users', user.uid, 'receits');
  }, [firestore, user]);

  const { data: rawReceits, isLoading } = useCollection<any>(receitsCollectionRef);

  const receits = useMemo((): Receit[] => {
    if (!rawReceits) return [];
    return rawReceits.map(r => {
      const receitData = {
        ...r,
        startDate: r.startDate instanceof Timestamp ? r.startDate.toDate() : new Date(r.startDate),
        dueDate: r.dueDate instanceof Timestamp ? r.dueDate.toDate() : new Date(r.dueDate),
      };
      // Validate with zod schema
      try {
        return receitSchema.parse(receitData);
      } catch (e) {
        console.error("Failed to parse receit:", receitData, e);
        return null;
      }
    }).filter((r): r is Receit => r !== null);
  }, [rawReceits]);


  const addReceit = useCallback((receit: Omit<Receit, 'id' | 'status' | 'userId'>) => {
    if (!receitsCollectionRef || !user) return;
    const newReceit = {
        ...receit,
        userId: user.uid,
        status: 'To-Do' as const,
    };
    // The id will be auto-generated by Firestore, so we pass the data without it
    addDocumentNonBlocking(receitsCollectionRef, newReceit);
  }, [receitsCollectionRef, user]);

  const updateReceit = useCallback((updatedReceit: Receit) => {
    if (!user) return;
    const docRef = doc(firestore, 'users', user.uid, 'receits', updatedReceit.id);
    const validatedReceit = receitSchema.parse(updatedReceit);
    updateDocumentNonBlocking(docRef, validatedReceit);
  }, [firestore, user]);

  const deleteReceit = useCallback((id: string, withLinked: boolean = false) => {
    if (!user) return;
    
    let idsToDelete: string[] = [id];
    
    if (withLinked) {
      const parentReceit = receits.find(r => r.id === id);
      if (parentReceit) {
        idsToDelete = [...new Set([...idsToDelete, ...parentReceit.linkedReceits])];
      }
    }

    idsToDelete.forEach(deleteId => {
        const docRef = doc(firestore, 'users', user.uid, 'receits', deleteId);
        deleteDocumentNonBlocking(docRef);
    });

    // Also remove the deleted receit from any other receit's linkedReceits array
    const updates = receits
        .filter(r => r.linkedReceits.some(linkedId => idsToDelete.includes(linkedId)))
        .map(r => {
            const newLinkedReceits = r.linkedReceits.filter(linkedId => !idsToDelete.includes(linkedId));
            return {
                id: r.id,
                changes: { linkedReceits: newLinkedReceits }
            };
        });

    updates.forEach(update => {
        const docRef = doc(firestore, 'users', user.uid, 'receits', update.id);
        updateDocumentNonBlocking(docRef, update.changes);
    })

  }, [firestore, user, receits]);
  
  const getReceitById = useCallback((id: string) => {
    return receits.find(r => r.id === id);
  }, [receits]);

  const categories = React.useMemo(() => {
    const defaultCategories = ["Development", "Marketing", "Personal"];
    const allCategories = new Set([...defaultCategories, ...receits.map(r => r.category)]);
    return [...allCategories];
  }, [receits]);

  return (
    <ReceitContext.Provider value={{ receits, isLoading, addReceit, updateReceit, deleteReceit, getReceitById, categories }}>
      {children}
    </ReceitContext.Provider>
  );
};

export const useReceits = () => {
  const context = useContext(ReceitContext);
  if (context === undefined) {
    throw new Error('useReceits must be used within a ReceitProvider');
  }
  return context;
};

    